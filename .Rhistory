Chol_pcr_num
num_pcr_resamp <- Chol_pcr_num$results
num_pcr_resamp <- "PCR"
Chol_pls_box <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:11), trControl = Chol_control_num)
Chol_pls_box
set.seed(123)
Chol_pls_box <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls_box <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls_box
set.seed(123)
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:11), trControl = Chol_control_num)
Chol_pls_num
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:10), trControl = Chol_control_num)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds_num <- createFolds(y = Chol_num_tr_X, k = 10, returnTrain = T)
Chol_control_num <- trainControl(method = "cv", index = Chol_folds_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:11), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:5), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:9), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:8), trControl = Chol_control_num)
Chol_pcr_num
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:8), trControl = Chol_control_num)
Chol_pls_num
pls_num_resamp <- Chol_pls_num$results
pls_num_resamp$Model <- "PLS"
plot2_data <- rbind(num_pcr_resamp, pls_num_resamp)
xyplot(RMSE ~ ncomp, data = plot2_data, xlab = "# of Components", ylab = "RMSE (Cross-validation)", auto.key = list(columns = 2), groups = Model, type = c("o", "g"))
View(pls_num_resamp)
num_pcr_resamp <- Chol_pcr_num$results
num_pcr_resamp$Model <- "PCR"
plot2_data <- rbind(num_pcr_resamp, pls_num_resamp)
xyplot(RMSE ~ ncomp, data = plot2_data, xlab = "# of Components", ylab = "RMSE (Cross-validation)", auto.key = list(columns = 2), groups = Model, type = c("o", "g"))
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .1, length = 15)), trControl = Chol_control_num)
View(Chol_tr_boxcox)
View(Chol_tr_x_imp_vr)
View(Chol_num_tr_X)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds_num <- createFolds(y = Chol_num_tr_X, k = 10, returnTrain = T)
Chol_control_num <- trainControl(method = "cv", index = Chol_folds_num)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .05, length = 15)), trControl = Chol_control_num)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .02, length = 15)), trControl = Chol_control_num)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .01, length = 15)), trControl = Chol_control_num)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .01, length = 15)), trControl = Chol_control)
Chol_enet_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_)
Chol_enet_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control_num)
is.na(Chol_num_tr_X)
View(Chol_num)
View(Chol_num_test_X)
View(Chol_num)
View(Chol_num_test_X)
View(Chol_num_tr_X)
Chol_enet_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "enet", trControl = Chol_control_num)
Chol_enet_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "enet")
test <- na.omit(Chol_num_tr_X)
Chol_enet_num <- train(x = as.matrix(Chol_tr_X_imp_fin), y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control_num)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .1, length = 15)), trControl = Chol_control)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_num)
Chol_folds <- createFolds(y = Chol_train_X, k = 10)
Chol_control <- trainControl(method = "cv", index = Chol_folds)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_num)
knitr::opts_chunk$set(echo = TRUE)
library(haven)
library(caret)
library(gridExtra)
library(corrplot)
library(e1071)
library(car)
library(lattice)
library(doParallel)
library(RANN)
library(tidyverse)
cl <- makeCluster(6)
registerDoParallel(cl)
Demographic <- read_xpt("P_DEMO.XPT")
BodySize <- read_xpt("P_BMX.XPT")
Chol_ldl <- read_xpt("P_TRIGLY.XPT")
#Select Variables of interest
Chol_ldl <- Chol_ldl %>% select(SEQN, LBDLDL)
#NA in target feature won't be useful
Chol_ldl <- Chol_ldl %>% drop_na()
#Get rid of variables we don't need
Drop_col <- c('SDDSRVYR', 'RIDSTATR', 'RIDEXMON', 'SIAPROXY', 'SIAINTRP', 'FIAPROXY', 'FIAINTRP', 'MIAPROXY', 'MIAINTRP', 'WTINTPRP', 'WTMECPRP', 'SDMVPSU', 'SDMVSTRA')
Demographic <- Demographic %>% select(-one_of(Drop_col))
Drop_col <- c('BMIWT', 'BMIRECUM', 'BMIHEAD', 'BMIHT', 'BMILEG', 'BMIARML', 'BMIARMC', 'BMIWAIST', 'BMIHIP', 'BMDSTATS')
BodySize <- BodySize %>% select(-one_of(Drop_col))
J1 <- Chol_ldl %>% left_join(Demographic, by = "SEQN")
Chol <- J1 %>% left_join(BodySize, by = "SEQN")
Chol <- Chol %>% select(!SEQN)
Chol_2 <- Chol
factors <- c("RIAGENDR", "RIDRETH1", "RIDRETH3", "DMDBORN4", "DMDEDUC2", "DMDMARTZ", "RIDEXPRG", "SIALANG", "FIALANG", "MIALANG", "AIALANGA")
Chol_2[,factors] <- lapply(Chol_2[,factors], factor)
levels(Chol_2$RIAGENDR) <- c("Male", "Female")
levels(Chol_2$RIDRETH1) <- c("Mex", "OHis", "White", "Black", "Oth")
levels(Chol_2$RIDRETH3) <- c("Mex", "OHis", "White", "Black", "Asian", "Oth")
levels(Chol_2$DMDBORN4) <- c("USA", "Oth", "Ref", "DK")
levels(Chol_2$DMDYRUSZ) <- c("<5", "5-15", "15-30", ">30", "Ref", "DK")
levels(Chol_2$DMDEDUC2) <- c("<9", "9-11", "HS", "AA", "BS+", "Ref", "DK")
levels(Chol_2$DMDMARTZ) <- c("Mar", "Sep", "Nev", "Ref", "DK")
levels(Chol_2$RIDEXPRG) <- c("Yes", "No", "DK")
levels(Chol_2$SIALANG) <- c("English", "Spanish")
levels(Chol_2$FIALANG) <- c("English", "Spanish")
levels(Chol_2$MIALANG) <- c("English", "Spanish")
levels(Chol_2$AIALANGA) <- c("English", "Spanish", "Asian")
Variable_na <- Chol_2 %>% select(everything()) %>% summarise_all(funs(sum(is.na(.)))) %>% pivot_longer(cols = c(colnames(Chol_2[,1:ncol(Chol_2)])), names_to = "Variable", values_to = "Missing") %>% arrange(desc(Missing))
Drop_col <- c("RIDAGEMN", "BMXRECUM", "BMXHEAD", "BMDBMIC", "RIDEXPRG", "DMDYRUSZ")
Chol_2 <- Chol_2 %>% select(-one_of(Drop_col))
row_na <- rowSums(is.na(Chol_2))
row_na <- data.frame(row_na, Row = c(1:length(row_na)))
row_na <- row_na %>% arrange(desc(row_na))
#Most missing values in a row is 12, not bad
#Looks like a fairly normal distribution, maybe a little skewed to the right.
ggplot(Chol_2, aes(x = LBDLDL)) + geom_histogram() + ggtitle("LDL Distribution Histogram")
skewness(Chol_2$LBDLDL)
#skewness value .7886403 confirms very mild skewness to the right
Chol_fact <- Chol_2 %>% select_if(is.factor)
Chol.bar <- function(xvar){
ggplot(Chol_fact, aes_(x = as.name(xvar))) +
geom_bar(color = "black") + coord_flip()
}
Lang_barplots <- lapply(names(Chol_fact[,7:10]), Chol.bar)
Oth_barplots <- lapply(names(Chol_fact[,1:6]), Chol.bar)
grid.arrange(grobs = Lang_barplots, top = "Language Features")
grid.arrange(grobs = Oth_barplots, top = "Other Demographics")
Chol_num <- Chol_2 %>% select_if(is.numeric) %>% select(!LBDLDL)
Chol.hist <- function(xvar){
ggplot(Chol_num, aes_(x = as.name(xvar))) +
geom_histogram(color = "black")
}
Dem_hist <- lapply(names(Chol_num[,1:2]), Chol.hist)
Body_hist <- lapply(names(Chol_num[,3:10]), Chol.hist)
grid.arrange(grobs = Dem_hist, top = "Demographic Features")
grid.arrange(grobs = Body_hist, top = "Body Measures")
Chol_dummy <- fastDummies::dummy_cols(Chol_2)
Chol_dummy <- Chol_dummy %>% select_if(~!is.factor(.))
Chol_dummy[] <- lapply(Chol_dummy, as.numeric)
Chol_cor <- cor(Chol_dummy, use = "complete.obs")
Chol_corplot <- corrplot(cor(Chol_dummy, use = "complete.obs"), tl.pos = 'n')
#Looks like some dummy variables that are refusal could be messing up correlations
Drop_col <- c("DMDBORN4_Ref", "DMDBORN4_DK", "DMDEDUC2_Ref", "DMDEDUC2_DK", "DMDEDUC2_NA", "DMDMARTZ_Ref", "DMDMARTZ_NA", "FIALANG_NA", "MIALANG_NA", "AIALANGA_NA")
Chol_dummy_2 <- Chol_dummy %>% select(-one_of(Drop_col))
cor(Chol_dummy_2, use = "complete.obs")
corrplot(cor(Chol_dummy_2, use = "complete.obs"), tl.pos = 'n', type = 'lower')
# Mini Correlations: Sociological Measures:
socio <- Chol_dummy_2[,c("RIAGENDR_Male","RIAGENDR_Female",
"RIDRETH1_Mex", "RIDRETH1_OHis", "RIDRETH1_White",
"RIDRETH1_Black", "RIDRETH1_Oth", "RIDRETH3_Mex", "RIDRETH3_OHis",
"RIDRETH3_White", "RIDRETH3_Black", "RIDRETH3_Asian", "RIDRETH3_Oth",
"DMDBORN4_USA", "DMDBORN4_Oth", "DMDEDUC2_<9", "DMDEDUC2_9-11",
"DMDEDUC2_HS", "DMDEDUC2_AA", "DMDEDUC2_BS+","DMDMARTZ_Mar",
"DMDMARTZ_Sep", "DMDMARTZ_Nev", "DMDMARTZ_DK", "SIALANG_English",
"SIALANG_Spanish", "FIALANG_English", "FIALANG_Spanish",
"MIALANG_English","MIALANG_Spanish", "AIALANGA_English",
"AIALANGA_Spanish", "AIALANGA_Asian", "LBDLDL")]
cor(socio, use = "complete.obs")
corrplot(cor(socio, use = "complete.obs"), tl.pos = 'y', type = 'lower',
order = "hclust", tl.cex = 0.5)
# Mini Correlations: Biological Measures:
biologic <- Chol_dummy_2[,c("RIDAGEYR", "BMXWT", "BMXHT", "BMXBMI",
"BMXLEG", "BMXARML", "BMXARMC", "BMXWAIST",
"BMXHIP", "RIAGENDR_Male", "RIAGENDR_Female","LBDLDL")]
cor(biologic, use = "complete.obs")
corrplot(cor(biologic, use = "complete.obs"), tl.pos = 'y', type = 'lower',
order = "hclust", tl.cex = 0.8)
# correlations between certain biological measures make sense. BMI is derived from the MASS and height of an individual, so it makes sense that many of the BMI measurements correlate with each other. (i.e. hip, waist, and weight measurements correlate with a higher BMI. Being female correlates negatively with leg and arm length as well as height)
# let's check for highly correlated predictors
# we'll do this on our non factor transformed dataset
dim(Chol)
# 27 variables. let's find correlations greater than 0.80 and see how the data looks if removed
corr_Chol <- cor(Chol)
# if removed, how many variables are left
high_corr_Chol <- findCorrelation(corr_Chol, cutoff = 0.80)
no_corr_Chol <- Chol[, -high_corr_Chol]
dim(no_corr_Chol)
testdata <- Chol_dummy
testdata <- apply(Chol_dummy, 2, function(y) {y[!is.finite(y)] = NA; y})
testdata <- testdata[complete.cases(testdata), ]
testdata <- testdata[, -nearZeroVar(testdata)]
testdata <- data.frame(testdata)
dim(Chol_dummy)
Cor_chol_dummy <- cor(testdata)
high_corr_dummy <- findCorrelation(Cor_chol_dummy, cutoff = 0.8)
# looking at a base linear model, to see significant variables
model0 <- lm(LBDLDL~., Chol_2)
summary(model0)
# significant contributors: variable (Pr(>|t|))
# RIDAGEYR (0.000132)
# (Intercept) (0.043474)
# MDBORN4Oth (0.076414)
# AIALANGASpanish (0.041803)
# BMXLEG (0.033051)
# BMXARMC (0.004507)
# BMXWAIST (0.071888)
# looking at VIF for baseline linear:
vif(model0)
# Let's check for degenerate predictors from the original dataset
nearZeroVar(Chol, saveMetrics = FALSE)
deg_chol <- subset(Chol, select=c(4,11,16,18,19))
colnames(deg_chol)
# Do it again on factor dataset
nearZeroVar(Chol_2, saveMetrics = FALSE)
deg_chol2 <- subset(Chol_2, select=c(13))
colnames(deg_chol2)
# we may have to consider removing depending on the data used for modeling
# set the seed and split the data. We'll do an 80/20 split
set.seed(123)
Chol_split <- createDataPartition(Chol$LBDLDL, p=0.80, list=FALSE)
# split into train and test
Chol_train <- Chol_dummy[Chol_split,]
Chol_test <- Chol_dummy[-Chol_split,]
# split predictors from the target
Chol_train_X <- as.data.frame(subset(Chol_train, select=-c(LBDLDL)))
Chol_train_y <- Chol_train$LBDLDL
Chol_test_X <- as.data.frame(subset(Chol_test, select=-c(LBDLDL)))
Chol_test_y <- Chol_test$LBDLDL
# Creating imputed data sets
Chol_imp <- preProcess(Chol_train_X, method = c("center", "scale", "knnImpute"))
Chol_train_X_imp <- predict(Chol_imp, Chol_train_X)
Chol_test_X_imp <- predict(Chol_imp, Chol_test_X)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds <- createFolds(y = Chol_train_X, k = 10, returnTrain = T)
Chol_control <- trainControl(method = "cv", index = Chol_folds)
Drop_col <- c('RIDRETH1', 'RIDRETH3', 'DMDBORN4', 'DMDEDUC2', 'DMDMARTZ', 'SIALANG', 'FIALANG', 'MIALANG', 'AIALANGA', 'LBDLDL')
Chol_num <- Chol_2 %>% select(-one_of(Drop_col))
Chol_num_tr_X <- as.data.frame(Chol_num[Chol_split, ])
Chol_num_test_X <- as.data.frame(Chol_num[Chol_split, ])
#Preprocess
Chol_imp <- preProcess(Chol_num_tr_X, method = c("center", "scale", "knnImpute"))
Chol_num_tr_X <- predict(Chol_imp, Chol_num_tr_X)
Chol_num_test_X <- predict(Chol_imp, Chol_num_test_X)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds_num <- createFolds(y = Chol_num_tr_X, k = 10, returnTrain = T)
Chol_control_num <- trainControl(method = "cv", index = Chol_folds_num)
Chol_ols_tune <- train(x = Chol_train_X_imp, y = Chol_train_y, method = "lm", trControl = Chol_control)
plot(Chol_ols_tune$finalModel)
# VIF shows aliased coefficients, need to get rid of those by removing high cor predictors
test <- cor(Chol_train_X_imp)
# Also have an issue with DMDEDUC2_DK all being zero so get rid of high var predictors
Chol_tr_x_imp_vr <- Chol_train_X_imp[, -nearZeroVar(Chol_train_X_imp)]
Chol_tr_X_imp_fin <- Chol_tr_x_imp_vr[, -findCorrelation(cor(Chol_tr_x_imp_vr), cutoff = 0.9)]
Chol_ols_tune2 <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "lm", trControl = Chol_control)
plot(Chol_ols_tune2$finalModel)
summary(Chol_ols_tune2$finalModel)
Chol_bct <- preProcess(Chol_tr_X_imp_fin, method = "BoxCox")
Chol_tr_boxcox <- predict(Chol_bct, Chol_tr_X_imp_fin)
Chol_ols_tune3 <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "lm", trControl = Chol_control)
plot(Chol_ols_tune3$finalModel)
summary(Chol_ols_tune3$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "lm", trControl = Chol_control_num, preProc = "BoxCox")
plot(Chol_ols_tune_num$finalModel)
summary(Chol_ols_tune_num$finalModel)
Chol_sig_tr <- Chol_tr_X_imp_fin %>% select(RIDAGEYR, BMXHT, BMXBMI, BMXLEG, BMXARMC,  DMDBORN4_Oth, DMDEDUC2_NA, MIALANG_NA, AIALANGA_NA)
Chol_ols <- train(x = Chol_sig_tr, y = Chol_train_y, method = "lm", trControl = Chol_control)
plot(Chol_ols$finalModel)
summary(Chol_ols$finalModel)
#Predict on test data
Chol_ols_res <- predict(Chol_ols, Chol_test_X)
set.seed(123)
Chol_pcr <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:32), trControl = Chol_control)
Chol_pcr
set.seed(123)
Chol_pcr_box <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:32), trControl = Chol_control)
Chol_pcr_box
set.seed(123)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:8), trControl = Chol_control_num)
Chol_pcr_num
pcr_resamp <- Chol_pcr$results
pcr_resamp$Model <- "PCR"
box_pcr_resamp <- Chol_pcr_box$results
box_pcr_resamp$Model <- "BPCR"
num_pcr_resamp <- Chol_pcr_num$results
num_pcr_resamp$Model <- "PCR"
set.seed(123)
Chol_pls <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls
set.seed(123)
Chol_pls_box <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls_box
set.seed(123)
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:8), trControl = Chol_control_num)
Chol_pls_num
pls_resamp <- Chol_pls_tune$results
plot_data <- rbind(pcr_resamp, box_pcr_resamp, pls_resamp, pls_box_resamp)
set.seed(123)
Chol_pls <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls
set.seed(123)
Chol_pls_box <- train(x = Chol_tr_boxcox, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:32), trControl = Chol_control)
Chol_pls_box
set.seed(123)
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:8), trControl = Chol_control_num)
Chol_pls_num
pls_resamp <- Chol_pls$results
pls_resamp$Model <- "PLS"
pls_box_resamp <- Chol_pls_box$results
pls_box_resamp$Model <- "BPLS"
pls_num_resamp <- Chol_pls_num$results
pls_num_resamp$Model <- "PLS"
plot_data <- rbind(pcr_resamp, box_pcr_resamp, pls_resamp, pls_box_resamp)
xyplot(RMSE ~ ncomp, data = plot_data, xlab = "# of Components", ylab = "RMSE (Cross-validation)", auto.key = list(columns = 4), groups = Model, type = c("o", "g"))
plot2_data <- rbind(num_pcr_resamp, pls_num_resamp)
xyplot(RMSE ~ ncomp, data = plot2_data, xlab = "# of Components", ylab = "RMSE (Cross-validation)", auto.key = list(columns = 2), groups = Model, type = c("o", "g"))
set.seed(123)
Chol_ridge <- train(x = Chol_tr_X_imp_fin, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .1, length = 15)), trControl = Chol_control)
Chol_ridge
set.seed(123)
Chol_ridge_box <- train(x = Chol_tr_boxcox, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .1, length = 15)), trControl = Chol_control)
Chol_ridge_box
set.seed(123)
#Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_n)
#Chol_ridge_num
print(update(plot(Chol_ridge), xlab = "Penalty"))
print(update(plot(Chol_ridge_box), xlab = "Penalty"))
set.seed(123)
Chol_ridge <- train(x = Chol_tr_X_imp_fin, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 75)), trControl = Chol_control)
Chol_ridge
set.seed(123)
Chol_ridge_box <- train(x = Chol_tr_boxcox, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 75)), trControl = Chol_control)
Chol_ridge_box
set.seed(123)
#Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_n)
#Chol_ridge_num
print(update(plot(Chol_ridge), xlab = "Penalty"))
print(update(plot(Chol_ridge_box), xlab = "Penalty"))
set.seed(123)
Chol_ridge <- train(x = Chol_tr_X_imp_fin, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .1, length = 15)), trControl = Chol_control)
Chol_ridge
set.seed(123)
Chol_ridge_box <- train(x = Chol_tr_boxcox, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 15)), trControl = Chol_control)
Chol_ridge_box
set.seed(123)
#Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_n)
#Chol_ridge_num
print(update(plot(Chol_ridge), xlab = "Penalty"))
print(update(plot(Chol_ridge_box), xlab = "Penalty"))
enet_grid <- expand.grid(lambda = c(0, 0.01, 0.1), fraction = seq(0.05, 1, length = 20))
Chol_enet <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control)
Chol_enet
Chol_enet_box <- train(x = Chol_tr_X_imp_fin, y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control)
Chol_enet_box
#Chol_enet_num <- train(x = as.matrix(Chol_tr_X_imp_fin), y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control_num)
plot(Chol_enet)
plot(Chol_enet_box)
str(Chol_num_tr_X)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_n)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge",  trControl = Chol_control_num)
nearZeroVar(Chol_num_tr_X)
Chol_num_tr_X[,nearZeroVar(Chol_num_tr_X)]
test <- na.omit(Chol_num_tr_X)
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 15)), trControl = Chol_control_num)
Chol_ridge_num
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 15)), trControl = Chol_control_num)
Chol_ridge_num
Drop_col <- c('RIDRETH1', 'RIDRETH3', 'DMDBORN4', 'DMDEDUC2', 'DMDMARTZ', 'SIALANG', 'FIALANG', 'MIALANG', 'AIALANGA', 'LBDLDL')
Chol_num <- Chol_2 %>% select(-one_of(Drop_col))
Chol_dummy <- fastDummies::dummy_cols(Chol_num)
Chol_num <- Chol_dummy %>% select_if(~!is.factor(.))
Chol_num[] <- lapply(Chol_num, as.numeric)
Chol_num_tr_X <- as.data.frame(Chol_num[Chol_split, ])
Chol_num_test_X <- as.data.frame(Chol_num[Chol_split, ])
#Preprocess
Chol_imp <- preProcess(Chol_num_tr_X, method = c("center", "scale", "knnImpute"))
Chol_num_tr_X <- predict(Chol_imp, Chol_num_tr_X)
Chol_num_test_X <- predict(Chol_imp, Chol_num_test_X)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds_num <- createFolds(y = Chol_num_tr_X, k = 10, returnTrain = T)
Chol_control_num <- trainControl(method = "cv", index = Chol_folds_num)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "lm", trControl = Chol_control_num, preProc = "BoxCox")
plot(Chol_ols_tune_num$finalModel)
summary(Chol_ols_tune_num$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "lm", trControl = Chol_control_num, preProc = "BoxCox")
plot(Chol_ols_tune_num$finalModel)
summary(Chol_ols_tune_num$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "lm", trControl = Chol_control_num)
plot(Chol_ols_tune_num$finalModel)
summary(Chol_ols_tune_num$finalModel)
View(Chol_num_test_X)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:12), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:11), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:10), trControl = Chol_control_num)
Chol_pcr_num
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:9), trControl = Chol_control_num)
Chol_pcr_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pcr", tuneGrid = expand.grid(ncomp=1:8), trControl = Chol_control_num)
Chol_pcr_num
Chol_ridge_num <- train(x = Chol_num_tr_X, y= Chol_train_y, method = "ridge", tuneGrid = expand.grid(lambda = seq(0, .5, length = 15)), trControl = Chol_control_num)
Chol_ridge_num
print(update(plot(Chol_ridge_num), xlab = "Penalty"))
Chol_enet_num <- train(x = as.matrix(Chol_tr_X_imp_fin), y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control_num)
Chol_enet_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "enet", tuneGrid = enet_grid, trControl = Chol_control_num)
plot(Chol_enet_num)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = log(Chol_train_y), method = "lm", trControl = Chol_control_num)
plot(Chol_ols_tune_num$finalModel)
summary(Chol_ols_tune_num$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = log10(Chol_train_y), method = "lm", trControl = Chol_control_num)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = log10(Chol_train_y), method = "lm", trControl = Chol_control_num)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = log10(Chol_train_y), method = "lm", trControl = Chol_control_num)
plot(Chol_ols_tune_num$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y^2, method = "lm", trControl = Chol_control_num)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = 1/Chol_train_y, method = "lm", trControl = Chol_control_num)
plot(Chol_ols_tune_num$finalModel)
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y^3, method = "lm", trControl = Chol_control_num)
Res_OLS <- predict(Chol_ols, Chol_test_X_imp)
Res_OLS_num <- predict(Chol_ols_tune_num, Chol_num_test_X)
Res_OLS <- predict(Chol_ols, Chol_test_X_imp)
Res_OLS_num <- predict(Chol_ols_tune_num, Chol_num_test_X)
Res_PLS <- predict(Chol_pls, Chol_test_X_imp)
Res_PLS_num <- predict(Chol_pls_num, Chol_num_test_X)
Chol_pls_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "pls", tuneGrid = expand.grid(ncomp = 1:8), trControl = Chol_control_num)
Res_PLS_num <- predict(Chol_pls_num, Chol_num_test_X)
Res_PCR <- predict(Chol_pcr, Chol_test_X_imp)
Res_PCR_num <- predict(Chol_pcr_num, Chol_num_test_X)
Res_Ridge <- predict(Chol_ridge, Chol_test_X_imp)
Res_Ridge_num <- predict(Chol_ridge_num, Chol_num_test_X)
Res_Enet <- predict(Chol_enet, Chol_test_X_imp)
Res_Enet_num <- predict(Chol_enet_num, Chol_num_test_X)
Res_OLS <- predict(Chol_ols, Chol_test_X_imp)
Res_OLS_num <- predict(Chol_ols_tune_num, Chol_num_test_X)
Res_PLS <- predict(Chol_pls, Chol_test_X_imp)
Res_PLS_num <- predict(Chol_pls_num, Chol_num_test_X)
Res_PCR <- predict(Chol_pcr, Chol_test_X_imp)
Res_PCR_num <- predict(Chol_pcr_num, Chol_num_test_X)
Res_Ridge <- predict(Chol_ridge, Chol_test_X_imp)
Res_Ridge_num <- predict(Chol_ridge_num, Chol_num_test_X)
Res_Enet <- predict(Chol_enet, Chol_test_X_imp)
Res_Enet_num <- predict(Chol_enet_num, Chol_num_test_X)
Linear_res <- cbind.data.frame(Observed = Chol_test_y, OLS = Res_OLS, OLS_num = Res_OLS_num, PLS = Res_PLS, PLS_num = Res_PLS_num, PCR = Res_PCR, PCR_num = Res_PCR_num ,Ridge = Res_Ridge, Ridge_num = Res_Ridge_num, ENet = Res_Enet, ENet_num = Res_Enet_num)
Drop_col <- c('RIDRETH1', 'RIDRETH3', 'DMDBORN4', 'DMDEDUC2', 'DMDMARTZ', 'SIALANG', 'FIALANG', 'MIALANG', 'AIALANGA', 'LBDLDL')
Chol_num <- Chol_2 %>% select(-one_of(Drop_col))
Chol_dummy <- fastDummies::dummy_cols(Chol_num)
Chol_num <- Chol_dummy %>% select_if(~!is.factor(.))
Chol_num[] <- lapply(Chol_num, as.numeric)
Chol_num_tr_X <- as.data.frame(Chol_num[Chol_split, ])
Chol_num_test_X <- as.data.frame(Chol_num[-Chol_split, ])
#Preprocess
Chol_imp <- preProcess(Chol_num_tr_X, method = c("center", "scale", "knnImpute"))
Chol_num_tr_X <- predict(Chol_imp, Chol_num_tr_X)
Chol_num_test_X <- predict(Chol_imp, Chol_num_test_X)
# Adding Resampling/Validation Set and Control
set.seed(123)
Chol_folds_num <- createFolds(y = Chol_num_tr_X, k = 10, returnTrain = T)
Chol_control_num <- trainControl(method = "cv", index = Chol_folds_num)
Res_OLS <- predict(Chol_ols, Chol_test_X_imp)
Res_OLS_num <- predict(Chol_ols_tune_num, Chol_num_test_X)
Res_PLS <- predict(Chol_pls, Chol_test_X_imp)
Res_PLS_num <- predict(Chol_pls_num, Chol_num_test_X)
Res_PCR <- predict(Chol_pcr, Chol_test_X_imp)
Res_PCR_num <- predict(Chol_pcr_num, Chol_num_test_X)
Res_Ridge <- predict(Chol_ridge, Chol_test_X_imp)
Res_Ridge_num <- predict(Chol_ridge_num, Chol_num_test_X)
Res_Enet <- predict(Chol_enet, Chol_test_X_imp)
Res_Enet_num <- predict(Chol_enet_num, Chol_num_test_X)
Linear_res <- cbind.data.frame(Observed = Chol_test_y, OLS = Res_OLS, OLS_num = Res_OLS_num, PLS = Res_PLS, PLS_num = Res_PLS_num, PCR = Res_PCR, PCR_num = Res_PCR_num ,Ridge = Res_Ridge, Ridge_num = Res_Ridge_num, ENet = Res_Enet, ENet_num = Res_Enet_num)
find_rmse <- function(x){
caret::RMSE(x, Linear_res[,"Observed"])
}
RMSE_results <- apply(X = Linear_res[,2:11], FUN = find_rmse, MARGIN = 2)
RMSE_results <- data.frame(RMSE_results)
Perm_metrics <- cbind(Model = rownames(R2_results),R2_results, RMSE_results)
View(RMSE_results)
RMSE_results$Model <- rownames(RMSE_results)
View(RMSE_results)
p1 <- ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=0, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE")
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=0, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE")
Chol_ols_tune_num <- train(x = Chol_num_tr_X, y = Chol_train_y, method = "lm", trControl = Chol_control_num)
Res_OLS <- predict(Chol_ols, Chol_test_X_imp)
Res_OLS_num <- predict(Chol_ols_tune_num, Chol_num_test_X)
Res_PLS <- predict(Chol_pls, Chol_test_X_imp)
Res_PLS_num <- predict(Chol_pls_num, Chol_num_test_X)
Res_PCR <- predict(Chol_pcr, Chol_test_X_imp)
Res_PCR_num <- predict(Chol_pcr_num, Chol_num_test_X)
Res_Ridge <- predict(Chol_ridge, Chol_test_X_imp)
Res_Ridge_num <- predict(Chol_ridge_num, Chol_num_test_X)
Res_Enet <- predict(Chol_enet, Chol_test_X_imp)
Res_Enet_num <- predict(Chol_enet_num, Chol_num_test_X)
Linear_res <- cbind.data.frame(Observed = Chol_test_y, OLS = Res_OLS, OLS_num = Res_OLS_num, PLS = Res_PLS, PLS_num = Res_PLS_num, PCR = Res_PCR, PCR_num = Res_PCR_num ,Ridge = Res_Ridge, Ridge_num = Res_Ridge_num, ENet = Res_Enet, ENet_num = Res_Enet_num)
find_rmse <- function(x){
caret::RMSE(x, Linear_res[,"Observed"])
}
RMSE_results <- apply(X = Linear_res[,2:11], FUN = find_rmse, MARGIN = 2)
RMSE_results <- data.frame(RMSE_results)
RMSE_results$Model <- rownames(RMSE_results)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=0, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE")
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE")
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_label(aes(label = RMSE_results))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_label(aes(label = round(RMSE_results)))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_label(aes(label = round(RMSE_results, 3)))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_label(aes(label = round(RMSE_results, 3)))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_label(aes(label = round(RMSE_results, 2)))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_text(aes(label = RMSE_results))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 3) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 1)))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 7) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 1), color = "white", size = 3))
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 7) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 1)), color = "white", size = 3)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 7) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 1)), color = "white", size = 3)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 1)), color = "white", size = 3)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 3)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
RMSE_results <- RMSE_results %>% arrange(RMSE_results)
View(RMSE_results)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
RMSE_results %>% arrange(RMSE_results) %>% ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=Model, y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=Model, xend = Model, y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=reorder(Model, -RMSE_results), xend = reorder(Model, -RMSE_results), y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
ggplot(RMSE_results, aes(x=reorder(Model, -RMSE_results), y=RMSE_results)) + geom_segment(aes(x=reorder(Model, -RMSE_results), xend = reorder(Model, -RMSE_results), y=30, yend=RMSE_results), color = "cadetblue") + geom_point(color = "darkblue", size = 10) + coord_flip() + ylab("RMSE") + geom_text(aes(label = round(RMSE_results, 2)), color = "white", size = 2.5)
